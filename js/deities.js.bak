// All content will be replaced.

document.addEventListener('DOMContentLoaded', () => {

    /**
     * Fetches data and initializes all modules on the page.
     * Centralized error handling for fetch operation.
     */
    async function main() {
        try {
            const response = await fetch('data/deities.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            
            // Initialize modules safely
            initializeCelestialWheel(data.heavenly_generals);
            initializeNarrative(data.monthly_generals);
            initializeMatrix(data);

        } catch (error) {
            console.error("Failed to fetch or initialize page:", error);
            // Display a generic error on all modules if data fails
            document.body.innerHTML = `<div class="container text-center py-5"><p class="text-danger">页面核心数据加载失败，请检查网络连接或联系管理员。</p><p>${error}</p></div>`;
        }
    }

    /**
     * MODULE 2: Celestial Wheel
     * @param {Array} generals - Array of heavenly general objects.
     */
    function initializeCelestialWheel(generals = []) {
        const wheel = document.querySelector('.celestial-wheel');
        const detailPanel = document.querySelector('.celestial-detail-panel');
        if (!wheel || !detailPanel) return;

        wheel.innerHTML = ''; // Clear placeholders

        const detailName = document.getElementById('celestial-detail-name');
        const detailSummary = document.getElementById('celestial-detail-summary');
        const detailContent = document.getElementById('celestial-detail-content');

        if (generals.length > 0) {
            updateDetailPanel(generals[0]);
        }

        const numGenerals = generals.length;
        const radius = wheel.offsetWidth / 2 * 0.8;

        generals.forEach((general, i) => {
            const angle = (i / numGenerals) * 360;
            const rad = (angle - 90) * Math.PI / 180;
            const x = (wheel.offsetWidth / 2) + radius * Math.cos(rad);
            const y = (wheel.offsetHeight / 2) + radius * Math.sin(rad);

            const el = document.createElement('div');
            el.className = 'celestial-general';
            el.style.left = `${x}px`;
            el.style.top = `${y}px`;
            el.innerHTML = `<i class="bi ${general.icon}"></i><span>${general.name}</span>`;
            el.addEventListener('click', () => handleGeneralClick(general, angle));
            wheel.appendChild(el);
        });

        function handleGeneralClick(general, angle) {
            const rotationAngle = -angle;
            wheel.style.transform = `rotate(${rotationAngle}deg)`;

            const allGeneralElements = document.querySelectorAll('.celestial-general');
            allGeneralElements.forEach(el => {
                el.style.setProperty('--rotation-angle', rotationAngle);
            });
            updateDetailPanel(general);
        }

        function updateDetailPanel(general) {
            detailPanel.style.opacity = 0;
            setTimeout(() => {
                detailName.textContent = general.name;
                detailSummary.textContent = general.summary;
                detailContent.innerHTML = `<p>${general.description}</p>`;
                detailPanel.style.opacity = 1;
            }, 300);
        }
    }

    /**
     * MODULE 3: Monthly Generals Scrolling Narrative
     * @param {Array} generals - Array of monthly general objects.
     */
    function initializeNarrative(generals = []) {
        const container = document.querySelector('.narrative-scroll-container');
        const nav = document.querySelector('.narrative-nav');
        if (!container || !nav) return;

        container.innerHTML = '';
        nav.innerHTML = '';

        generals.forEach(general => {
            const section = document.createElement('div');
            section.className = 'narrative-section';
            section.id = `monthly-${general.id}`;
            section.style.backgroundImage = `url('${general.image_url}')`;
            section.innerHTML = `<div class="narrative-content"><h3>${general.name}</h3><p class="narrative-zodiac">( ${general.zodiac} )</p><p class="narrative-description">${general.description}</p></div>`;
            
            // Add click-to-center functionality to the section itself
            section.addEventListener('click', () => {
                section.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
            });

            container.appendChild(section);

            const dot = document.createElement('span');
            dot.className = 'nav-dot';
            dot.dataset.target = `#monthly-${general.id}`;
            dot.addEventListener('click', () => document.querySelector(dot.dataset.target).scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' }));
            nav.appendChild(dot);
        });

        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const visibleId = entry.target.id;
                    nav.querySelectorAll('.nav-dot').forEach(dot => {
                        dot.classList.toggle('active', dot.dataset.target === `#${visibleId}`);
                    });
                }
            });
        }, { root: container, threshold: 0.6 });

        container.querySelectorAll('.narrative-section').forEach(section => observer.observe(section));
    }

    /**
     * MODULE 4: Dynamic Relationship Matrix
     * @param {Object} data - The entire deities data object.
     */
    function initializeMatrix(data = {}) {
        const selector1 = document.getElementById('matrix-selector-1');
        const selector2 = document.getElementById('matrix-selector-2');
        const resultBox = document.querySelector('.matrix-result-box');
        const resultText = document.getElementById('matrix-result-text');
        if (!selector1 || !selector2 || !resultBox || !resultText) return;

        const allGenerals = [...(data.heavenly_generals || []), ...(data.monthly_generals || [])];
        if (allGenerals.length === 0) return;

        selector1.innerHTML = '';
        selector2.innerHTML = '';

        allGenerals.forEach(g => {
            selector1.add(new Option(`${g.type_ch} - ${g.name}`, g.id));
            selector2.add(new Option(`${g.type_ch} - ${g.name}`, g.id));
        });

        const updateMatrix = () => {
            const g1 = allGenerals.find(g => g.id === selector1.value);
            const g2 = allGenerals.find(g => g.id === selector2.value);
            if (!g1 || !g2) return;

            const wuxingMap = { '金': { '生': '水', '克': '木' }, '木': { '生': '火', '克': '土' }, '水': { '生': '木', '克': '火' }, '火': { '生': '土', '克': '金' }, '土': { '生': '金', '克': '水' }};
            let rel = '', css = 'unknown';

            if (g1.wuxing === g2.wuxing) { rel = '比和'; css = 'bihe'; }
            else if (wuxingMap[g1.wuxing]?.['生'] === g2.wuxing) { rel = `${g1.name} 生 ${g2.name}`; css = 'sheng'; }
            else if (wuxingMap[g1.wuxing]?.['克'] === g2.wuxing) { rel = `${g1.name} 克 ${g2.name}`; css = 'ke'; }
            else if (wuxingMap[g2.wuxing]?.['生'] === g1.wuxing) { rel = `${g2.name} 生 ${g1.name}`; css = 'sheng'; }
            else if (wuxingMap[g2.wuxing]?.['克'] === g1.wuxing) { rel = `${g2.name} 克 ${g1.name}`; css = 'ke'; }
            
            resultText.textContent = rel;
            resultBox.className = `matrix-result-box result-${css}`;
        };

        selector1.addEventListener('change', updateMatrix);
        selector2.addEventListener('change', updateMatrix);

        if (allGenerals.length >= 2) {
            selector1.value = allGenerals[0].id;
            selector2.value = allGenerals[1].id;
        }
        updateMatrix();
    }

    // Run the application
    main();
});
